/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include <string.h>

typedef struct Message{
    int msgID;
    int sourceID;
    int destinationID;
    int trailingMsg;
    int functionID;
    char payload[492];
}Message;


//length of answer is 492
void getPayload(Message *packet, char *answer){
    int i=0;
    while (i<492){
        answer[i]=packet->payload[i];
        i++;
    }
}

void setPayload(Message *packet, char* new_payload){
    int i=0;
    while (i<492){
        packet->payload[i] = new_payload[i];
        i++;
    }
}

int byte2int(char *bytes, int startPoint){
    return bytes[startPoint+3] + (bytes[startPoint+2] << 8) + (bytes[startPoint+1] << 16) + (bytes[startPoint] << 24)
}

//length of input is 512
void setMessage(Message *packet, char* bytes){
    packet->msgID = byte2int(bytes, 0);
    packet->sourceID = byte2int(bytes, 4);
    packet->destinationID = byte2int(bytes, 8);
    packet->trailingMsg = byte2int(bytes, 12);
    packet->functionID = byte2int(bytes, 16);
    
    for (int i=0; i<492; i++)
         packet->payload[i] = bytes[i+20];
}

void int2byte(int num, char *bytes, int startPoint){
    bytes[startPoint] = (num>>24) & 0xFF;
    bytes[startPoint+1] = (num>>16) & 0xFF;
    bytes[startPoint+2] = (num>>8) & 0xFF;
    bytes[startPoint+3] = num & 0xFF;
}

//length of input is 512
void getBytes(Message *packet, char *bytes){
    int2byte(packet->msgID, bytes, 0);
    int2byte(packet->sourceID, bytes, 4);
    int2byte(packet->destinationID, bytes, 8);
    int2byte(packet->trailingMsg, bytes, 12);
    int2byte(packet->functionID, bytes, 16);

    for (int i=0; i<492; i++)
        bytes[i+20] = packet->payload[i];
}

int main()
{
    
   Message msg;
   msg.msgID = 2049;
   char ans[492];
   getBytes(&msg, ans);
   
   setMessage(&msg, ans);
   printf("%d\n",msg.msgID);

//   printf("%d\n", ans[0]);
//   printf("%d\n", ans[1]);
//   printf("%d\n", ans[2]);
//   printf("%d\n", ans[3]);
   
    
    
}
